//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace WebAppProject.Models
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class LeaveMasterEntities : DbContext
    {
        public LeaveMasterEntities()
            : base("name=LeaveMasterEntities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<Attendance> Attendances { get; set; }
        public virtual DbSet<Employee> Employees { get; set; }
        public virtual DbSet<Leaf> Leaves { get; set; }
        public virtual DbSet<Project> Projects { get; set; }
        public virtual DbSet<Role> Roles { get; set; }
    
        public virtual int spAddAttendance(Nullable<int> employeeID, Nullable<int> projectID, Nullable<System.DateTime> attendanceDate, string status, Nullable<int> managerID)
        {
            var employeeIDParameter = employeeID.HasValue ?
                new ObjectParameter("EmployeeID", employeeID) :
                new ObjectParameter("EmployeeID", typeof(int));
    
            var projectIDParameter = projectID.HasValue ?
                new ObjectParameter("ProjectID", projectID) :
                new ObjectParameter("ProjectID", typeof(int));
    
            var attendanceDateParameter = attendanceDate.HasValue ?
                new ObjectParameter("AttendanceDate", attendanceDate) :
                new ObjectParameter("AttendanceDate", typeof(System.DateTime));
    
            var statusParameter = status != null ?
                new ObjectParameter("Status", status) :
                new ObjectParameter("Status", typeof(string));
    
            var managerIDParameter = managerID.HasValue ?
                new ObjectParameter("ManagerID", managerID) :
                new ObjectParameter("ManagerID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spAddAttendance", employeeIDParameter, projectIDParameter, attendanceDateParameter, statusParameter, managerIDParameter);
        }
    
        public virtual int spAddEmployee(string employeeName, string email, string phone, Nullable<System.DateTime> hireDate, Nullable<int> roleID, Nullable<int> managerID, string password, Nullable<int> leaveBalance, Nullable<int> no_of_leave, string emp_status)
        {
            var employeeNameParameter = employeeName != null ?
                new ObjectParameter("EmployeeName", employeeName) :
                new ObjectParameter("EmployeeName", typeof(string));
    
            var emailParameter = email != null ?
                new ObjectParameter("Email", email) :
                new ObjectParameter("Email", typeof(string));
    
            var phoneParameter = phone != null ?
                new ObjectParameter("Phone", phone) :
                new ObjectParameter("Phone", typeof(string));
    
            var hireDateParameter = hireDate.HasValue ?
                new ObjectParameter("HireDate", hireDate) :
                new ObjectParameter("HireDate", typeof(System.DateTime));
    
            var roleIDParameter = roleID.HasValue ?
                new ObjectParameter("RoleID", roleID) :
                new ObjectParameter("RoleID", typeof(int));
    
            var managerIDParameter = managerID.HasValue ?
                new ObjectParameter("ManagerID", managerID) :
                new ObjectParameter("ManagerID", typeof(int));
    
            var passwordParameter = password != null ?
                new ObjectParameter("Password", password) :
                new ObjectParameter("Password", typeof(string));
    
            var leaveBalanceParameter = leaveBalance.HasValue ?
                new ObjectParameter("LeaveBalance", leaveBalance) :
                new ObjectParameter("LeaveBalance", typeof(int));
    
            var no_of_leaveParameter = no_of_leave.HasValue ?
                new ObjectParameter("No_of_leave", no_of_leave) :
                new ObjectParameter("No_of_leave", typeof(int));
    
            var emp_statusParameter = emp_status != null ?
                new ObjectParameter("Emp_status", emp_status) :
                new ObjectParameter("Emp_status", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spAddEmployee", employeeNameParameter, emailParameter, phoneParameter, hireDateParameter, roleIDParameter, managerIDParameter, passwordParameter, leaveBalanceParameter, no_of_leaveParameter, emp_statusParameter);
        }
    
        public virtual int spAddLeaveRequest(Nullable<int> employeeID, Nullable<System.DateTime> startDate, Nullable<System.DateTime> endDate, string leaveType, string reason, Nullable<int> managerID)
        {
            var employeeIDParameter = employeeID.HasValue ?
                new ObjectParameter("EmployeeID", employeeID) :
                new ObjectParameter("EmployeeID", typeof(int));
    
            var startDateParameter = startDate.HasValue ?
                new ObjectParameter("StartDate", startDate) :
                new ObjectParameter("StartDate", typeof(System.DateTime));
    
            var endDateParameter = endDate.HasValue ?
                new ObjectParameter("EndDate", endDate) :
                new ObjectParameter("EndDate", typeof(System.DateTime));
    
            var leaveTypeParameter = leaveType != null ?
                new ObjectParameter("LeaveType", leaveType) :
                new ObjectParameter("LeaveType", typeof(string));
    
            var reasonParameter = reason != null ?
                new ObjectParameter("Reason", reason) :
                new ObjectParameter("Reason", typeof(string));
    
            var managerIDParameter = managerID.HasValue ?
                new ObjectParameter("ManagerID", managerID) :
                new ObjectParameter("ManagerID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spAddLeaveRequest", employeeIDParameter, startDateParameter, endDateParameter, leaveTypeParameter, reasonParameter, managerIDParameter);
        }
    
        public virtual int spAddProject(string projectName, string description)
        {
            var projectNameParameter = projectName != null ?
                new ObjectParameter("ProjectName", projectName) :
                new ObjectParameter("ProjectName", typeof(string));
    
            var descriptionParameter = description != null ?
                new ObjectParameter("Description", description) :
                new ObjectParameter("Description", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spAddProject", projectNameParameter, descriptionParameter);
        }
    
        public virtual int spApproveRejectAttendance(Nullable<int> attendanceID, string approvalStatus)
        {
            var attendanceIDParameter = attendanceID.HasValue ?
                new ObjectParameter("AttendanceID", attendanceID) :
                new ObjectParameter("AttendanceID", typeof(int));
    
            var approvalStatusParameter = approvalStatus != null ?
                new ObjectParameter("ApprovalStatus", approvalStatus) :
                new ObjectParameter("ApprovalStatus", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spApproveRejectAttendance", attendanceIDParameter, approvalStatusParameter);
        }
    
        public virtual int spApproveRejectLeaveRequest(Nullable<int> leaveID, string approvalStatus)
        {
            var leaveIDParameter = leaveID.HasValue ?
                new ObjectParameter("LeaveID", leaveID) :
                new ObjectParameter("LeaveID", typeof(int));
    
            var approvalStatusParameter = approvalStatus != null ?
                new ObjectParameter("ApprovalStatus", approvalStatus) :
                new ObjectParameter("ApprovalStatus", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spApproveRejectLeaveRequest", leaveIDParameter, approvalStatusParameter);
        }
    
        public virtual int spDeleteAttendance(Nullable<int> attendanceID)
        {
            var attendanceIDParameter = attendanceID.HasValue ?
                new ObjectParameter("AttendanceID", attendanceID) :
                new ObjectParameter("AttendanceID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spDeleteAttendance", attendanceIDParameter);
        }
    
        public virtual int spDeleteEmployee(Nullable<int> employeeID)
        {
            var employeeIDParameter = employeeID.HasValue ?
                new ObjectParameter("EmployeeID", employeeID) :
                new ObjectParameter("EmployeeID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spDeleteEmployee", employeeIDParameter);
        }
    
        public virtual int spDeleteLeaveRequest(Nullable<int> leaveID)
        {
            var leaveIDParameter = leaveID.HasValue ?
                new ObjectParameter("LeaveID", leaveID) :
                new ObjectParameter("LeaveID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spDeleteLeaveRequest", leaveIDParameter);
        }
    
        public virtual int spDeleteProject(Nullable<int> projectID, string prj_status)
        {
            var projectIDParameter = projectID.HasValue ?
                new ObjectParameter("ProjectID", projectID) :
                new ObjectParameter("ProjectID", typeof(int));
    
            var prj_statusParameter = prj_status != null ?
                new ObjectParameter("Prj_status", prj_status) :
                new ObjectParameter("Prj_status", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spDeleteProject", projectIDParameter, prj_statusParameter);
        }
    
        public virtual ObjectResult<spGetPendingAttendanceApprovals_Result> spGetPendingAttendanceApprovals(Nullable<int> managerID)
        {
            var managerIDParameter = managerID.HasValue ?
                new ObjectParameter("ManagerID", managerID) :
                new ObjectParameter("ManagerID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spGetPendingAttendanceApprovals_Result>("spGetPendingAttendanceApprovals", managerIDParameter);
        }
    
        public virtual ObjectResult<spGetPendingLeaveRequests_Result> spGetPendingLeaveRequests(Nullable<int> managerID)
        {
            var managerIDParameter = managerID.HasValue ?
                new ObjectParameter("ManagerID", managerID) :
                new ObjectParameter("ManagerID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spGetPendingLeaveRequests_Result>("spGetPendingLeaveRequests", managerIDParameter);
        }
    
        public virtual int spUpdateAttendance(Nullable<int> attendanceID, string status, Nullable<int> managerID)
        {
            var attendanceIDParameter = attendanceID.HasValue ?
                new ObjectParameter("AttendanceID", attendanceID) :
                new ObjectParameter("AttendanceID", typeof(int));
    
            var statusParameter = status != null ?
                new ObjectParameter("Status", status) :
                new ObjectParameter("Status", typeof(string));
    
            var managerIDParameter = managerID.HasValue ?
                new ObjectParameter("ManagerID", managerID) :
                new ObjectParameter("ManagerID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spUpdateAttendance", attendanceIDParameter, statusParameter, managerIDParameter);
        }
    
        public virtual int spUpdateEmployee(Nullable<int> employeeID, string employeeName, string email, string phone, Nullable<System.DateTime> hireDate, Nullable<int> roleID, Nullable<int> managerID, Nullable<int> projectID, Nullable<int> leaveBalance)
        {
            var employeeIDParameter = employeeID.HasValue ?
                new ObjectParameter("EmployeeID", employeeID) :
                new ObjectParameter("EmployeeID", typeof(int));
    
            var employeeNameParameter = employeeName != null ?
                new ObjectParameter("EmployeeName", employeeName) :
                new ObjectParameter("EmployeeName", typeof(string));
    
            var emailParameter = email != null ?
                new ObjectParameter("Email", email) :
                new ObjectParameter("Email", typeof(string));
    
            var phoneParameter = phone != null ?
                new ObjectParameter("Phone", phone) :
                new ObjectParameter("Phone", typeof(string));
    
            var hireDateParameter = hireDate.HasValue ?
                new ObjectParameter("HireDate", hireDate) :
                new ObjectParameter("HireDate", typeof(System.DateTime));
    
            var roleIDParameter = roleID.HasValue ?
                new ObjectParameter("RoleID", roleID) :
                new ObjectParameter("RoleID", typeof(int));
    
            var managerIDParameter = managerID.HasValue ?
                new ObjectParameter("ManagerID", managerID) :
                new ObjectParameter("ManagerID", typeof(int));
    
            var projectIDParameter = projectID.HasValue ?
                new ObjectParameter("ProjectID", projectID) :
                new ObjectParameter("ProjectID", typeof(int));
    
            var leaveBalanceParameter = leaveBalance.HasValue ?
                new ObjectParameter("LeaveBalance", leaveBalance) :
                new ObjectParameter("LeaveBalance", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spUpdateEmployee", employeeIDParameter, employeeNameParameter, emailParameter, phoneParameter, hireDateParameter, roleIDParameter, managerIDParameter, projectIDParameter, leaveBalanceParameter);
        }
    
        public virtual int spUpdateLeaveRequest(Nullable<int> leaveID, string approvalStatus)
        {
            var leaveIDParameter = leaveID.HasValue ?
                new ObjectParameter("LeaveID", leaveID) :
                new ObjectParameter("LeaveID", typeof(int));
    
            var approvalStatusParameter = approvalStatus != null ?
                new ObjectParameter("ApprovalStatus", approvalStatus) :
                new ObjectParameter("ApprovalStatus", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spUpdateLeaveRequest", leaveIDParameter, approvalStatusParameter);
        }
    
        public virtual int spUpdateProject(Nullable<int> projectID, string projectName, string description)
        {
            var projectIDParameter = projectID.HasValue ?
                new ObjectParameter("ProjectID", projectID) :
                new ObjectParameter("ProjectID", typeof(int));
    
            var projectNameParameter = projectName != null ?
                new ObjectParameter("ProjectName", projectName) :
                new ObjectParameter("ProjectName", typeof(string));
    
            var descriptionParameter = description != null ?
                new ObjectParameter("Description", description) :
                new ObjectParameter("Description", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spUpdateProject", projectIDParameter, projectNameParameter, descriptionParameter);
        }
    }
}
